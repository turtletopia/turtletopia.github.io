<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on Turtletopia: a blog about programming in R</title>
    <link>/categories/overview/</link>
    <description>Recent content in Overview on Turtletopia: a blog about programming in R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/overview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview: Sorting Version Codes</title>
      <link>/2022/07/16/overview-sort-version-codes/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/2022/07/16/overview-sort-version-codes/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#problem-statement&#34;&gt;Problem statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solutions&#34;&gt;Solutions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-base-r&#34;&gt;Using base R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-gtools&#34;&gt;Using gtools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-naturalsort&#34;&gt;Using naturalsort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-stringrstringi&#34;&gt;Using stringr/stringi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-versionsort&#34;&gt;Using versionsort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semantic-version-codes&#34;&gt;Semantic version codes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-semver&#34;&gt;Using semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-semverutils&#34;&gt;Using semverutils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;problem-statement&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;Different versions of software are traditionally described using version codes. These codes contain usually numerical values and subsequent versions increment these codes, allowing them to be sorted. The standard is to use “&lt;a href=&#34;https://semver.org&#34;&gt;semantic versioning&lt;/a&gt;”, where codes are in the form of “major.minor.patch”; the bigger the update, the more important number is incremented.&lt;/p&gt;
&lt;p&gt;However, not all software obey semantic versioning standard.&lt;/p&gt;
&lt;p&gt;Suppose we have a vector of version codes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes &amp;lt;- c(&amp;quot;1.2&amp;quot;, &amp;quot;1.10&amp;quot;, &amp;quot;1.1&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’d expect them to be ordered as 1.1, 1.2, 1.10. If you try to order version codes using base &lt;code&gt;sort()&lt;/code&gt; functionality…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sort(codes)
## [1] &amp;quot;1.1&amp;quot;  &amp;quot;1.10&amp;quot; &amp;quot;1.2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…oh. Where did something go wrong?&lt;/p&gt;
&lt;p&gt;This is what’s called “alphabetical sorting”. It checks characters one by one, including digits. “1” is before “2”, so “10” goes before “2”, no matter the value. Thus, it cannot compare numbers, if they have a different number of digits.&lt;/p&gt;
&lt;p&gt;Numerous software uses the following trick to have it sort correctly: it pads the numbers with leading 0’s until a certain length. For example, your old camera could name photos like &lt;code&gt;00034.jpg&lt;/code&gt;, &lt;code&gt;00164.jpg&lt;/code&gt;, etc. But this is not the approach to use here. We need a different one.&lt;/p&gt;
&lt;p&gt;Sorting version codes requires using something called “natural sort”, where numbers are detected and ordered according to their value (with letters still sorted alphabetically, thus placing e.g. “a99” before “b51”). This is a more intuitive sorting for humans than pure alphabetical sort.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;solutions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Several packages allow natural sorting of character vectors. There’s even a base R solution! However, not all natural sorting algorithms are adapted to handle version codes, which (usually) have a particular structure with dots and/or dashes. Let’s have a look at the options.&lt;/p&gt;
&lt;div id=&#34;using-base-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using base R&lt;/h3&gt;
&lt;p&gt;There’s a facility in base R allowing the user to handle (numeric) version codes. While there is no simple “sort these strings like they were version codes” function, you can wrap your vector in &lt;code&gt;numeric_version()&lt;/code&gt; and use associated methods, like comparison operators (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;…), as well as &lt;code&gt;sort()&lt;/code&gt; method for this class. This is what it looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sort(numeric_version(codes))
## [1] &amp;#39;1.1&amp;#39;  &amp;#39;1.2&amp;#39;  &amp;#39;1.10&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two main problems with this approach, however. But first, let’s quote the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Numeric versions are sequences of one or more non-negative integers, usually (…) represented as character strings with the elements of the sequence concatenated and separated by single . or - characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that version codes cannot have any string components or non-standard separators. As described in the semantic versioning standard, letters are allowed in pre-release identifiers and build metadata, so the base solution cannot even handle all valid cases of semantic versioning, much less the variety of version codes that don’t fit these rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-gtools&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using gtools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/r-gregmisc/gtools&#34;&gt;gtools&lt;/a&gt; is a collection of functions to help with simple tasks when writing R packages. It has a &lt;code&gt;mixedsort()&lt;/code&gt; function that detects embedded numbers in strings. However…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gtools::mixedsort(codes)
## [1] &amp;quot;1.10&amp;quot; &amp;quot;1.1&amp;quot;  &amp;quot;1.2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…it is not suited to sorting version codes. The use case here is different, it’s detecting numbers like these in “Aspirin 50mg” and “Aspirin 100mg” (examples taken from the documentation). Dots in version codes are treated as decimal separators, that’s why &lt;code&gt;&#34;1.10&#34;&lt;/code&gt; and &lt;code&gt;&#34;1.1&#34;&lt;/code&gt; are considered equal.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-naturalsort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using naturalsort&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kos59125/naturalsort&#34;&gt;naturalsort&lt;/a&gt; isn’t written specifically for sorting version codes either, but…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;naturalsort::naturalsort(codes)
## [1] &amp;quot;1.1&amp;quot;  &amp;quot;1.2&amp;quot;  &amp;quot;1.10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…it gets the job done. The difference lies in not treating dots as decimal separators (in fact, naturalsort doesn’t recognize decimals at all). Instead, the code detects numbers and non-numbers, then splits the strings into continuous pieces of numbers and non-numbers. If we were to For example, &lt;code&gt;&#34;1.10-a&#34;&lt;/code&gt; would be split like that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;split_like_naturalsort(&amp;quot;1.10-a&amp;quot;)
## [1] &amp;quot;1&amp;quot;  &amp;quot;.&amp;quot;  &amp;quot;10&amp;quot; &amp;quot;-a&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These pieces are then used to sort version codes either alphabetically or by value, depending on whether it’s a number or not. Accidentally, this works well for almost all version codes. The only case where it’s working a little weird is when there’s an inconsistency in separators:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weird_codes &amp;lt;- c(&amp;quot;1.3-6&amp;quot;, &amp;quot;1.3-2&amp;quot;, &amp;quot;1.3.4&amp;quot;)
naturalsort::naturalsort(weird_codes)
## [1] &amp;quot;1.3-2&amp;quot; &amp;quot;1.3-6&amp;quot; &amp;quot;1.3.4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like that naturalsort has &lt;code&gt;decreasing&lt;/code&gt; and &lt;code&gt;na.last&lt;/code&gt; parameters, implemented just like in base &lt;code&gt;sort()&lt;/code&gt;. There’s also a &lt;code&gt;naturalfactor()&lt;/code&gt; function that could be useful for long vectors of repeated version codes.&lt;/p&gt;
&lt;p&gt;naturalsort isn’t developed since 2016, but this shouldn’t be considered a problem, since the package is in an already stable state. There’s one pet peeve of mine about this package and it’s the implicit coercion of parameters. Let’s say we accidentally made this call:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;naturalsort::naturalsort(codes,
                         decreasing = c(&amp;quot;true&amp;quot;, &amp;quot;dat&amp;quot;))
## [1] &amp;quot;1.10&amp;quot; &amp;quot;1.2&amp;quot;  &amp;quot;1.1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out &lt;code&gt;c(&#34;true&#34;, &#34;dat&#34;)&lt;/code&gt; was coerced to logical, then the first element was taken. It should raise an error saying that the arguments are wrong, but – instead – it tries to work at all costs, over-interpreting the parameters. A similar thing would happen with a vector of logical values.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-stringrstringi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using stringr/stringi&lt;/h3&gt;
&lt;p&gt;You’ve probably already installed &lt;a href=&#34;https://github.com/tidyverse/stringr&#34;&gt;stringr&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/gagolews/stringi&#34;&gt;stringi&lt;/a&gt; if you’ve been using R for a while. Both these packages can do way, way more to strings than just some natural sorting, but we’ll focus on just that. There’s a parameter called &lt;code&gt;numeric&lt;/code&gt; in &lt;code&gt;stri_sort()&lt;/code&gt;, where we can pass &lt;code&gt;TRUE&lt;/code&gt; to sort digits numerically:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# There&amp;#39;s analogous stringr::str_sort() function
stringi::stri_sort(codes, numeric = TRUE)
## [1] &amp;quot;1.1&amp;quot;  &amp;quot;1.2&amp;quot;  &amp;quot;1.10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The overall implementation seems to base on the same idea of separating numbers and non-numbers, and it has the same behavior on inconsistent separators:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stringi::stri_sort(weird_codes, numeric = TRUE)
## [1] &amp;quot;1.3-2&amp;quot; &amp;quot;1.3-6&amp;quot; &amp;quot;1.3.4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are &lt;code&gt;decreasing&lt;/code&gt; and &lt;code&gt;na_last&lt;/code&gt; parameters just like in &lt;code&gt;naturalsort()&lt;/code&gt; and base &lt;code&gt;sort()&lt;/code&gt;; and again, there’s silent argument coercion I despise. At least I can give half a point for raising a warning when only the first element is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-versionsort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using versionsort&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/turtletopia/versionsort&#34;&gt;versionsort&lt;/a&gt; is our solution to this problem. I’ve implemented, documented, tested, and submitted it to CRAN within 24 hours when working on implementing a feature in &lt;a href=&#34;https://github.com/DominikRafacz/deepdep&#34;&gt;deepdep&lt;/a&gt;; obviously, it has changed a bit since then.&lt;/p&gt;
&lt;p&gt;There’s a &lt;code&gt;ver_sort()&lt;/code&gt; function that’s of the main interest here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;versionsort::ver_sort(codes)
## [1] &amp;quot;1.1&amp;quot;  &amp;quot;1.2&amp;quot;  &amp;quot;1.10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works a little differently than other sorts I’ve mentioned before, as it splits the string on separators first (which are sequences of anything that is not a number or a letter), only then separating numbers and non-numbers (i.e. letters). All separators are equal, which gives a little more predictable behavior with inconsistent separators:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;versionsort::ver_sort(weird_codes)
## [1] &amp;quot;1.3-2&amp;quot; &amp;quot;1.3.4&amp;quot; &amp;quot;1.3-6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;versionsort is still a Work-In-Progress, which means that it lacks &lt;code&gt;decreasing&lt;/code&gt; and &lt;code&gt;na_last&lt;/code&gt; parameters, but this whole analysis serves partially to define requirements for future development (more in soon-to-be-published versionsort Dev Plan).&lt;/p&gt;
&lt;p&gt;There’s one convenient utility versionsort has, though – the pair of functions named &lt;code&gt;ver_latest()&lt;/code&gt; and &lt;code&gt;ver_oldest()&lt;/code&gt;. They return &lt;code&gt;max()&lt;/code&gt; and &lt;code&gt;min()&lt;/code&gt; for version codes, respectively, without the need for sorting the whole vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;versionsort::ver_latest(codes)
## [1] &amp;quot;1.10&amp;quot;
versionsort::ver_oldest(codes)
## [1] &amp;quot;1.1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stay tuned for the new, improved versionsort!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;semantic-version-codes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Semantic version codes&lt;/h2&gt;
&lt;p&gt;All these solutions have one thing in common – they don’t detect semantic version codes. There are, however, R packages with this functionality; I’ve found two, described below.&lt;/p&gt;
&lt;div id=&#34;using-semver&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using semver&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/johndharrison/semver&#34;&gt;semver&lt;/a&gt; is the most used R package for handling semantic version codes. It relies heavily on &lt;a href=&#34;https://github.com/zmarko/semver&#34;&gt;C++ semver&lt;/a&gt; implementation under the hood, but it results in a wide range of functionalities: there are many methods for parsed semantic codes, &lt;code&gt;sort()&lt;/code&gt; included:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;semver_codes &amp;lt;- semver::parse_version(
  c(&amp;quot;1.6.0-dev&amp;quot;, &amp;quot;1.5.10&amp;quot;, &amp;quot;1.5.1&amp;quot;, &amp;quot;1.6.0&amp;quot;)
)
sort(semver_codes)
## [1] Maj: 1 Min: 5 Pat: 1
## 
## [2] Maj: 1 Min: 5 Pat: 10
## 
## [3] Maj: 1 Min: 6 Pat: 0 Pre: dev
## 
## [4] Maj: 1 Min: 6 Pat: 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Operators as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;semver_codes[1:3] &amp;lt; semver_codes[2:4]
## [1] FALSE FALSE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;max()&lt;/code&gt; and &lt;code&gt;min()&lt;/code&gt; too:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(semver_codes)
## Maj: 1 Min: 6 Pat: 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This package has the most functionality of them all…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;semver::parse_version(&amp;quot;1.0-10&amp;quot;)
## Error in parse_ptr(version): invalid character encountered: -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but is nonetheless limited to semantic version codes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-semverutils&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using semverutils&lt;/h3&gt;
&lt;p&gt;Sorting numeric codes is not possible in &lt;a href=&#34;https://github.com/ajwtech/semverutils&#34;&gt;semverutils&lt;/a&gt;. You can only check if a version code is higher than others by calling:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;v_code &amp;lt;- semverutils::semVer$new(c(&amp;quot;1.6.0-dev&amp;quot;))
v_code$higherThanAll(c(&amp;quot;1.5.10&amp;quot;, &amp;quot;1.6.0&amp;quot;, &amp;quot;1.5.1&amp;quot;))
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, the answer isn’t even correct, since &lt;code&gt;&#34;1.6.0-dev&#34;&lt;/code&gt; precedes &lt;code&gt;&#34;1.6.0&#34;&lt;/code&gt; due to being a pre-release version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are a few ways to sort version codes. If your version codes are simple and well-behaved, &lt;code&gt;base::numeric_version()&lt;/code&gt; should be enough. If you need to handle semantic version codes, use &lt;a href=&#34;https://github.com/johndharrison/semver&#34;&gt;semver&lt;/a&gt;. Otherwise, there is no best solution, but &lt;a href=&#34;https://github.com/turtletopia/versionsort&#34;&gt;versionsort&lt;/a&gt; is the closest you can get, especially after the next big update is published.&lt;/p&gt;
&lt;p&gt;Missed a package? Described one incorrectly? Contact us &lt;a href=&#34;https://twitter.com/Rturtletopia&#34;&gt;on Twitter&lt;/a&gt; or make an issue &lt;a href=&#34;https://github.com/turtletopia/turtletopia.github.io/issues&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
